# -*- coding: utf-8 -*-
"""01.Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a6YDpvcGpbU8xIRcakVZtjgJ_8nVPH6r
"""



"""Data type in Python

*Float*
"""

a = 1.7
type(a)

"""Complex numbers"""

a = 0.5+0.5j
type(a)

"""Integer"""

a = 1
type(a)

"""data type is dynamic."""

a = 1.0
print(type(a))
a=int(a)
print(type(a))

"""From integer to float"""

b=float(a)
type(b)

"""String"""

a ='string'
type(a)

"""When you compare statements: Boolean"""

3==4

3==3

"""List"""

a=[1,2,3,4,'5', []]
type(a)

"""Elements of list can be anything. Be aware of the fact that it starts from 0"""

print(a[0])
type(a[0])

type(a[4])

"""The index of the last element is -1"""

type(a[-1])

"""you can change the elements in a list"""

print(a)
a[4]='new'
print(a)

"""Tuple is different.It's element can not be changed"""

b=(1,2,3,4)
print(b)

b(0)= 100

"""A dictionary is composed of keys and values"""

d={'hight':173.0, 'id':20030234, 24:True}
print(d)

d["hight"]

d[24]

"""Distionary is also dynamic."""

d["id"]=20070234
print(d["id"])

"""To add a pair of key and value"""

d["x"]= 13
print(d["x"])
print(d)

"""Most of data types in Python is dynamic.

"""

x = 3.0
print(x)

x= 'you can change it dynamically'
print(x)

"""If you want to wrap the values"""

x = 3.0
y = 4.0
print('x is', x,'and y is', y)
x, y = y, x
print('x is', x, 'and y is', y)

"""List is really useful"""

a = range(5)
print(a)

a = list(a)
print(a)

"""If you want to add an item at the end"""

a.append(5)
print(a)

"""Another way"""

a = a + [1]
print(a)

"""If you want to put something at a specific position"""

a.insert(1,1.5)
print(a)

"""if you want to extract an item"""

print(a)
b = a.pop(1)
print(b)

a=[3,2,1]
a.remove(3)
print(a)

"""If you want to delete something at a specific position"""

a = [3, 2, 1]
del a[1]
print(a)

"""Rename"""

b = [1,2,3,4,5]
a=b
print(a)

b[1] = 100
print(b)

"""In this case, b and a are identical so..."""

print(a)

"""If you want to copy"""

import copy

a = copy.copy(b)
b[1]= 300
print(b)

print(a)

"""Arthmetic"""

3+1

3-6

4*4

3/4

"""Complex number"""

3*(1+2j)

(1+3j)*(2-4j)

"""The quotient can also be calculated"""

9//5

"""Quotient and remainder"""

divmod(9,5)

"""Fractions

"""

from fractions import Fraction
Fraction(3,4)

Fraction(3,4)+1

Fraction(3,4)*Fraction(5,2)

"""To find a fraction that is close to a given number"""

Fraction('3.14159').limit_denominator(1000)

"""Let's perform an operation on a string"""

'Jupyter'+'Lab'

5*"Jupyter"

"""How about for the list?"""

[1,2,3]+[4]

5*[1,2,'3']

"""Can you check which value is the most common in a list?"""

alist=[1,2,3,3,'3']
from collections import Counter
x = Counter(alist)
print(x.most_common())
print(x.most_common(1))
print(x.most_common(1)[0])
print(type(x.most_common(1)[0]))
print(x.most_common(1)[0][0])

"""For and while"""

alist=['A', 'B','C','D']
for i in alist:
  print(i)

print(len(alist))
for i in range(len(alist)):
  print(i,alist[i])

i = 0
while i < 7:
  print(i)
  i +=1

"""But i +=1 is not necessary"""

i = 0
while i < 7:
  print(i)
  i += 2

"""Prime numbers less than or equal to 100"""

prime =[2]
for i in range(3, 101):
  time = 0
  for j in range(len(prime)):
    if i % prime[j] == 0:
       time +=1

  if time == 0:
    prime.append(i)

print(prime)

"""Function"""

def f(x,m=2,n=1):
  y = x*m+n
  #print(y)
  return(y)

def f(x, m=2, n=1):
  y=x*m+n
  print(y)
f(5)

f(5, n= 8)

f(5, m=3, n=2)

"""More thing about strings"""

a = "Physical Review Letters"
alower = a.lower()
print(alower)
aCapital = a.capitalize()
print(aCapital)

print(alower.title())
print(a.upper())
print(a.swapcase())

print(a.find('w'))
print(a.find('Let'))

print(a.replace('P','r'))

a='  Physical Review Letters  '

print(a.lstrip())
print(a.rstrip())
print(a.strip())

print(a.split())

aLines = 'to be or not to be\nThat is the question'
aLineSplit=aLines.splitlines()
print(aLineSplit)
print(aLines.split('\n'))

Hamlet ='To be, or not to be'
print(Hamlet)
HamletList = Hamlet.split()
print(HamletList)
print(' '.join(HamletList))

print('  '.join(HamletList))

"""Print"""

a, b = 1, 2
c = a+b

print('sum of', a, 'and', b, 'is', c)

print('sum of ' + str(a) + ' and ' + str(b) + ' is ' + str(c))

print('sum of %s and %s is %s' %(a,b,c))

print('sum of {} and {} is {}'.format(a,b,c))

"""Special characters

"""

print("A backslash t \t is a tab")

print("A backslash n \n is a new line character")

"""Number"""

print("%.2d" %1)

print("%.3d" %3.141592)

print("%.5f" %6.30201345)

"""There are many occasions to import modules. A module can be thought of as a file containing functions, variables, and classes. You can load the entire module, or you can only call specific functions in the module. Below, let's take a look at the most used module, numpy"""

import numpy as np

X = [1,2,3]
print(X+X)

"""Howerver, in the case of array:"""

Y = np.asarray(X)
print(Y+Y)
print(3*Y)
print(Y+3)
print(Y*Y)
print(1/Y)
print(Y**5)

"""Replace the list defined above"""

X[0] = 100
print(X)

"""If we print out the arrays that had the same values, we can see that they are independent of each other"""

print(Y)

"""Using Numpy, you can easily fine x, y, and z-axis components of a vector using trigonometric functions"""

x = np.array([np.cos(30/180*np.pi),np.sin(30/180*np.pi)])
print(x)

"""The absolute value of the vector"""

np.linalg.norm(x)

"""Matrix"""

np.identity(3)

np.ones((3,3))

np.identity(3) + np.ones((3,3))

"""matrix operations"""

np.identity(3) @ np.ones((3,3))

np.dot(np.identity(3),np.ones((3,3)))

"""Inverse matrix"""

x = np.array([[1,2],[2,1]])
print(x)
y = np.linalg.inv(x)
print(y)

"""Identify matrix"""

print(x @ y)

"""To change the shape of matrix"""

x = np.array(range(12))
print(x)

x= np.reshape(x,(12,1))
print(x)

np.reshape(x,(3,4))

"""Matplotlib http://matplotlib.org/

install

python -m pip install -U pip

python -m pip install -U matplotlib

conda install matplotlib

conda install -c conda-forge matplotlib
"""

import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4])
plt.ylabel("some numbers")
plt.show()

"""List or arrays are OK"""

import numpy as np
import matplotlib.pyplot as plt

x = [1, 2, 3, 4]
y = np.asarray([1, 4, 9, 16])
plt.plot(x, y)
plt.show()

"""Makers"""

plt.plot(x, y, 'rs')  #red square
plt.plot(x, y+3, 'bp')  #blue
plt.plot(x, y+6, 'rs--')
#plt.axis([0, 6, 0, 25])
plt.xlim(0, 6)
plt.ylim(0, 25)
plt.show()

plt.plot(x, y, linewidth = 2.0)
plt.plot(x, y+2, lw = 6.0)

import numpy as np
plt.figure()

plt.subplot(211)
x= np.linspace(0,1,20)
plt.plot(x, np.cos(2*np.pi*x), 'bo')
plt.plot(x, np.cos(2*np.pi*x), 'r--')

plt.subplot(223)
x = np.linspace(0,1,20)
plt.plot(x, np.sin(2*np.pi*x)*np.sin(2*np.pi*x), 'bo')
plt.plot(x, np.sin(2*np.pi*x)*np.sin(2*np.pi*x), 'r--')

plt.subplot(224)
x = np.linspace(0,1,20)
plt.plot(x, np.sin(2*np.pi*x), 'bo')
plt.plot(x, np.sin(2*np.pi*x), 'r--')

#Using a function
def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

plt.subplot(211)
plt.plot(x, f(x), 'bo', x, f(x), 'k')

#Label for the axes
t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2*np.pi*t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel="position ($\AA$)", ylabel="voltage (mV)")
ax.grid()
fig.savefig("test.png", dpi = 300)
fig.savefig("test.pdf")
plt.show()

import numpy as np, matplotlib.pyplot as plt
x = np.random.normal(0, 1, 10)
y = np.random.normal(0, 1, 10)
sizes = np.random.uniform(10, 100, 10)
colors = np.random.uniform(0, 1, 10)
plt.scatter(x, y, s = sizes, c = colors)
plt.xlabel('x')
plt.ylabel('y')
plt.colorbar()
plt.show()

import numpy as np, matplotlib.pyplot as plt
x = np.arange(7) + 0.5
y = np.random.uniform(1, 9, len(x))
plt.bar(x,y, width=1, edgecolor='white')
plt.xlabel("day")
plt.ylabel("hours")
plt.show()

import numpy as np, matplotlib.pyplot as plt
x = np.random.normal(0,1, 10000)
plt.hist(x, bins = 15, edgecolor='white')
plt.xlabel("x")
plt.ylabel("frequency")
plt.show()

plt.hist(x, bins = 15, edgecolor='white',density=True)

plt.hist(x, bins = 15, edgecolor='white',density=True, cumulative=True)

"""Root finding

bisection method
"""

import numpy as np, matplotlib as plt
eps = 1E-8
def f(x):
  return np.sin(x)

x1 = 2
x2 = 4
while ((x2-x1)>eps):
  x3 = (x1+x2)/2.0
  if (f(x1)*f(x3) < 0.0): x2 = x3
  else: x1 = x3
  print(x3, f(x3))

"""
Newton method


"""

import numpy as np, matplotlib as plt
eps = 1E-8
def f(x):
  return np.sin(x)
def df(x):
  return np.cos(x)
x= 2
while (np.abs(f(x))> eps):
  x -= f(x)/df(x)
  print(x, f(x))

"""You may use scipy as well

https://scipy.org/install/

python -m pip install scipy
"""

from pylab import sin
from scipy.optimize import brentq
x = brentq(sin , 2, 4)
print(x)

import numpy as np, matplotlib.pyplot as plt

x = np.arange(1, 13)
y = [-2.4, 0.4, 5.7, 12.5, 17.8, 22.2, 24.9, 25.7, 21.2, 14.8, 7.2, 0.4]

z = np.polyfit(x, y, 10) ##x-data, y-data, degree
f = np.poly1d(z)
x_new = np.linspace(x[0], x[-1], 20)
print(x_new)

y_new = f(x_new)
print(x_new)

plt.plot(x, y, 'o', color = 'b', alpha = 0.5, ms = 10, label = 'raw data')
plt.plot(x_new, y_new, '-', color = 'r', alpha = 0.5, label = 'fitted')
plt.xlim([x[0]-1, x[-1]+1])
plt.legend()
plt.show()
plt.savefig('Seoul.png', dpi = 300)

"""Get all the file in the folder"""

import glob
glob.glob("*")

"""You can also import only certain types of files"""

glob.glob("*.ipynp")

glob.glob("*t*")

"""To save the file"""

temStringList = ['To be, or not to be,', 'that is the question:']
a = open('Hamlet.txt', 'w')
print(''.join(temStringList))
print(' '.join(temStringList))
print('\n'.join(temStringList))
a.write('\n'.join(temStringList))
a.close()

"""How to open a file?"""

a = open('Hamlet.txt')
print(a)

b = a.readline()
print(b)
a.close()

"""You can read the file and save it as a list immediately. This is also pretty useful"""

a = open('Hamlet.txt')
b = a.readline()
print(b)

"""With python, you can also run Unix commands"""

import os
os.system("cp Hamplet.txt Hamplet_copied.txt")

os.system("rm Hamlet_copied.txt")

os.system("touch 1.txt")

"""Change the name of files"""

os.rename("1.txt", "2.txt")

os.system("mkdir test")

os.system("rmdir test")

"""makedirs to make folders"""

os.makedirs('temp/temp')

"""Delete of the folder"""

os.removedirs('temp/temp')

"""Your current location, and change it"""

os.getcwd()

os.chdir("../")
os.getcwd()

os.listdir()

